def solution(arr):
    n = len(arr[0]) #입력 배열의 열의 개수 저장
    dp = [[0] * n for _ in range(4)] #dp 배열 초기화
    
    #각 열에서 선택 가능한 4가지 조약돌 배치 패턴에 대해 첫번째 열의 가중치 초기화
    # 0:상단, 1:중앙, 2:하단, 3:상하단
    dp[0][0] = arr[0][0]
    dp[1][0] = arr[1][0]
    dp[2][0] = arr[2][0]
    dp[3][0] = arr[0][0] + arr[2][0]
    
    #두번째 열부터 마지막 열까지 각 열에서 선택 가능한 4가지 배치 패턴에 대해 최대 가중치를 계산
    for i in range(1, n):
        #패턴 0을 선택 -> 1, 2 가능
        dp[0][i] = arr[0][i] + max(dp[1][i-1], dp[2][i-1])
        #패턴1 -> 0,2,3
        dp[1][i] = arr[1][i] + max(dp[0][i-1], dp[2][i-1], dp[3][i-1])
        #패턴2 -> 0,1
        dp[2][i] = arr[2][i] + max(dp[0][i-1]), dp[1][i-1]
        #패턴 3 -> 1
        dp[3][i] = arr[3][i] + max(dp[1][i-1])
        
    #마지막 열에서 선택 가능한 4가지 중 최대 가중치 반환
    return max(dp[0][-1], dp[1][-1], dp[2][-1], dp[3][-1])